task :default => :build

desc "Deploy to S3"
task :deploy => :build do
    sh "s3cmd sync --reduced-redundancy --exclude 'img/*' _site/* s3://www.maxmanders.co.uk"
    sh "s3cmd sync --reduced-redundancy --add-header 'Expires: Thu, 6 Feb 2020 00:00:00 GMT' _site/img/* s3://www.maxmanders.co.uk/img/"
end

desc 'Clean up generated site'
task :clean do
  cleanup
end

desc 'Test site output for Liquid template errors'
task :test => :build do
  errors = `grep --exclude Rakefile -R 'Liquid error:' _site`
  if errors.nil? || errors.empty?
    puts "No errors"
  else
    puts "Errors:"
    puts errors.inspect
    exit 1
  end
end

desc 'Build site with Jekyll'
task :build => :clean do
  sh 'jekyll build'
end

desc 'Start server' 
task :serve => :clean do
  sh 'jekyll serve'
end

desc 'Start server and watch' 
task :watch => :clean do
  sh 'jekyll serve --watch'
end

desc 'Make a new post'
task :post, [:name] do |t, args|
  if args.name then
    template(args.name)
  else
    puts "Name required"
  end
end

def template(name)
  t = Time.now
  contents = "" 
  File.open("_posts/yyyy-mm-dd-template.markdown", "rb") do |f|
    contents = f.read
  end
  contents = contents.sub("%date%", t.strftime("%Y-%m-%d %H:%M:%S %z")).sub("%title%", name)
  filename = "_posts/" + t.strftime("%Y-%m-%d-") + name.downcase.gsub( /[^a-zA-Z0-9_\.]/, '-') + '.markdown'
  if File.exists? filename then
    puts "Post already exists: #{filename}"
    return
  end
  File.open(filename, "wb") do |f|
    f.write contents
  end
  puts "created #{filename}"
end

def cleanup
  sh 'rm -rf _site'
end

def submodule(opts = '')
  sh 'git submodule ' + opts
end
